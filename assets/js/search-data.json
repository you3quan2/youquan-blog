{
  
    
        "post0": {
            "title": "Creating a Simple Database in ASP.NET",
            "content": "This page is still under construction! . Learning Outcomes . In this tutorial, we will: . Learn what is a database along with some simple concepts such as data type, primary key and foreign key. | Learn how to create a database for an ASP.NET project using Microsoft Visual Studio. | . Prerequisite . If you are new to ASP.NET, I suggest you to look into this tutorial to learn how to create an ASP.NET web project with Microsoft Visual Studio. . Why we need to learn this? . Almost all web sites involve a database. If you have just signed up a new Twitter account, where is the information about your account will be stored? Yes, the database! Running a web site involves the operation of inserting, retrieving, updating and deleting data from the database. Hence, if we want to learn how to develop a web application, then we must also learn about the database. . Basic Concepts of Database . In simple words, a database is made up of one or more tables, and a table consists of one or more rows and columns. Assume that we have a web site which has multiple registered users, and each user has their username, password and role (e.g. admin, normal user). Then, we can have the user information stored in a User table as follow: . user_id username password role . YQ01 | yquan | abc123 | admin | . Data Types . When creating this table, we also need to specify the type of data which can be stored in each column. For example, we can assign the data type nchar(10) for the username column, which indicates the username column can only store a fixed maximum length of 10 characters. There are a few other data types which we commonly used, such as datetime to store data and time; int to store an integer; decimal to store decimal digits. You can refer to this link to access a comprehensive list of data types. . Primary Key and Foreign Key . A primary key (PK) is one or more columns which can uniquely represent each row in a table. In our example above, the user_id YQ01 is exclusive for that specific row, and no other rows within the same table have this same user_id. It is very similar to your Student ID or Staff ID, where no one have the same ID as yours. Note that a table can contain only one primary key (which can be one or more columns) and these columns cannot be left null (a.k.a empty). . A foreign key (FK) is a key used to link two tables together. It is one or more columns in a table that refers to the primary key in another table. To better explain this, I split our table above into two tables (User and Role): . role_id is primary key in the Role table. The same key acts as a foreign_key in the User table which established a link between the User table and the Role table. You may question why it is necessary to split the User table into two. . Now, imagine our web site has an interface which allows admin to manage (e.g. update, delete) the role of the users. If the admin decides to add a new role (e.g. super admin), how the one User table can be updated? Note that we cannot insert a new role without the user record into this User table because user_id is the primary key of this table and cannot be left null. If we have a Role table, then the role updating task becomes easier as we only need to update the Role table whenever the admin adds or deletes a role. . You can refer to this link to read the discussions about Why should I use foreign keys in database?. . Creating a Database in ASP.NET . Let’s start to create our first database in ASP.NET using Microsoft Visual Studio. . In the Solution Explorer, right click on the project (e.g. ASP.NetTutorial) and select Add → New Item. Under Visual C#, click on Data and select SQL Server Database. Change the name of the database to aspnettutorial.mdf and click Add. .mdf stand for Master Database File and it is the primary database file of Microsoft SQL Server. . | We are supposed to get a confirmation message as follow. Click Yes. . | Go to the top of Visual Studio and click View → Server Explorer. The aspnettutorial.mdf will appeared under Data Connection. . | Creating Tables in the Database . Now, we are going to add tables into the database. We will stick with the example above by having two tables: the User table and the Role table. . In Server Explorer, go to the Table folder under aspnettutorial.mdf. Right click on the folder and select Add New Table. A design surface for the table will be shown. Rename the table by updating the following line CREATE TABLE [dbo].[User] under the T-SQL tab. Next, add the following columns into the table, and make sure we get the right data types for these columns: user_id (nchar(10)) | username (nchar(10)) | password (nvarchar(MAX)) | role_id (int) | . | By following the guidance provided above, create the Role table which has the following columns: role_id (int) | role_name (nchar(10)) | . | Setting the Keys for Tables . There are two primary keys () and one foreign key in the User and Role table. . CONSTRAINT [FK_User_Role] FOREIGN KEY ([role_id]) REFERENCES Role . CONSTRAINT [FK_User_Role] FOREIGN KEY ([role_id]) REFERENCES Role . &lt;%@ Page Title=&quot;&quot; Language=&quot;C#&quot; MasterPageFile=&quot;~/Site1.Master&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;Home.aspx.cs&quot; Inherits=&quot;ASPNetTutorial.Home&quot; %&gt; &lt;asp:Content ID=&quot;Content1&quot; ContentPlaceHolderID=&quot;head&quot; runat=&quot;server&quot;&gt; &lt;/asp:Content&gt; &lt;asp:Content ID=&quot;Content2&quot; ContentPlaceHolderID=&quot;ContentPlaceHolder1&quot; runat=&quot;server&quot;&gt; &lt;h2&gt; This is my HOME page (GitLab Test). &lt;/h2&gt; &lt;/asp:Content&gt; . |",
            "url": "https://you3quan2.github.io/youquan-blog/visual%20studio/asp.net/master%20page/web/programming/2020/04/11/create-database-aspnet-web.html",
            "relUrl": "/visual%20studio/asp.net/master%20page/web/programming/2020/04/11/create-database-aspnet-web.html",
            "date": " • Apr 11, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "How To Integrate Gitlab with Microsoft Visual Studio",
            "content": "Under Construction!!! . I have explained in one of my blog posts on how Gitlab can be a useful tool for a team of software developers to manage a single software project from anywhere on the earth efficiently. However, if you are a student, Gitlab can also be used as your own personal project repositiory, where you can keep track on your programming coursework, and as the same time, use it as a backup. In this short tutorial, we will learn how to integrate Gitlab with Microsoft Visual Studio, where we will synchronise a ASP.NET web project between our personal workstation and Gitlab. . Requirements . Microsoft Visual Studio (I am using the 2019 version). See here on how to download and install. | Gitlab. Create an account here. | . Creating a Gitlab Project . Login to our Gitlab and clik the New Project button in the upper right corner of the page. | Give a name to our project (e.g. ASPNetTutorial) and click on Create Project. We can give a description to the project but it is optional. . | We will be redirected to the project page. This project should be empty. Click on the down arrow in the Clone button and copy the URL under Clone with HTTPS and paster it somewhere else (e.g. a text file). We will need this URL later. | Setting Up Gitlab in Microsoft Visual Studio . Open/Create a project using Microsoft Visual Studio. If you are not sure how to do this, then please refer to this link. . | Once the project is ready, go to the top of the Visual Studio and click on File → Add to Source Control. . | If we do not have the Team Explorer opened, then click on View → Team Explorer. Within the Team Explorer, we are supposed to see our project is now under the Local Git Repositories. . | Push our project from Visual Studio to Gitlab . Double click on our project under the Local Git Repositories and we will get to the Team Explorer - Home: . | Click on Settings and set up our User Name and Email Address. This information is used to identify us as the author of the project. . | Go back to Team Explorer - Home by clicking on the Home icon button. Now, click on Sync and go to Push to Remote Repository. Key in the URL which we have copied from our Gitlab account earlier (e.g. https://gitlab.com/you3quan2/aspnettutorial.git) and click on Publish. . | We will be asked to enter the User name and Password for our Gitlab’s account. . | Visit our Gitlab account again and check on the empty project which we have created earlier. We are supposed to see the ASP.NET project which we have created in this Gitlab project’s repository. . | Update changes in Visual Studio to Gitlab . Now, we have the exact same project in our Visual Studio and Gitlab. But, we still need to update the Gitlab’s project every time we made changes on the project in Visual Studio. I will show you an example how we can do this. . In my ASPNetTutorial project, there is a Home.aspx file which contains the following codes: . &lt;%@ Page Title=&quot;&quot; Language=&quot;C#&quot; MasterPageFile=&quot;~/Site1.Master&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;Home.aspx.cs&quot; Inherits=&quot;ASPNetTutorial.Home&quot; %&gt; &lt;asp:Content ID=&quot;Content1&quot; ContentPlaceHolderID=&quot;head&quot; runat=&quot;server&quot;&gt; &lt;/asp:Content&gt; &lt;asp:Content ID=&quot;Content2&quot; ContentPlaceHolderID=&quot;ContentPlaceHolder1&quot; runat=&quot;server&quot;&gt; &lt;h2&gt; This is my HOME page. &lt;/h2&gt; &lt;/asp:Content&gt; . I updated my Home.aspx file and adding (GitLab Test) to &lt;h2&gt;&lt;/h2&gt;: . &lt;%@ Page Title=&quot;&quot; Language=&quot;C#&quot; MasterPageFile=&quot;~/Site1.Master&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;Home.aspx.cs&quot; Inherits=&quot;ASPNetTutorial.Home&quot; %&gt; &lt;asp:Content ID=&quot;Content1&quot; ContentPlaceHolderID=&quot;head&quot; runat=&quot;server&quot;&gt; &lt;/asp:Content&gt; &lt;asp:Content ID=&quot;Content2&quot; ContentPlaceHolderID=&quot;ContentPlaceHolder1&quot; runat=&quot;server&quot;&gt; &lt;h2&gt; This is my HOME page (GitLab Test). &lt;/h2&gt; &lt;/asp:Content&gt; . Note: You can make changes in any files you like within your project. . To update these changes, I perform the following steps: . Go to Team Explorer - Home and click on Changes. If we have made changes to our project, we will see a list of files which are affected by the changes we made under Changes. Under Branch: master, key in a commit message (e.g. Changes made to ome.aspx for Gitlab testing). Click on Commit All. . | We will see a message as follow. Click on Sync so that the changes we have made will be reflected in our Gitlab’s project repository. . | Go to the Gitlab account and check on the specific file which we have modified. We are supposed to see the changes which we have made. If we click on the History button, we will see our commit changes: . Takeaways . By now, you should know how to setup your Visual Studio and Gitlab in order to push your project from your workstation to Gitlab. . I hope you found this tutorial helpful. Have more questions about this? Let me know by commenting below! .",
            "url": "https://you3quan2.github.io/youquan-blog/gitlab/visual%20studio/asp.net/web/programming/2020/04/10/integrate-gitlab-visualstudio-web.html",
            "relUrl": "/gitlab/visual%20studio/asp.net/web/programming/2020/04/10/integrate-gitlab-visualstudio-web.html",
            "date": " • Apr 10, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "How To Add Bootstrap In ASP.NET",
            "content": "If you have learned basic web design, then you must know about Cascading Style Sheets (CSS). Commonly, your web project will have a .css file, which defines the design of your web pages. For example, if we want to have a button with a green background, we need to have a .css file which defines the style of the button: . .button { background-color: #4CAF50; border: none; color: white; padding: 15px 32px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; } . Note: This CSS code is from the w3school CSS tutorial. . . However, the task of creating a button like this can be simplified with the use of Bootstrap. Bootstrap is a free and open-source CSS framework which contains CSS-based and JavaScript-based design templates for various interface components, including the button which we want to create. For example, with Bootstrap, we just need to define the class (e.g. btn-success) of the button in our .html page (or .aspx for ASP.NET): . &lt;button type=&quot;button&quot; class=&quot;btn btn-success&quot;&gt;Success&lt;/button&gt; . The Bootstrap documentation provides a comprehensive guide for us to create almost all the design which we can think of. . To unleash the power of Bootstrap in our ASP.NET web application, we can add Bootstrap package to our ASP.NET web project by following these steps: . In the Solution Explorer, right click on the project (e.g. ASPNetTutorial) and select Manage NuGet Packages. . | Under the NuGet window, click on Browse and search for Bootstrap using the Search. Once we get the Bootstrap package, click on ↓ to add the package to our web project. . | We will be asked to confirm the installation, where the following files will be added into our web project: jQuery.3.0.0 | popper.js.1.16.0 | bootstrap.4.4.1 | . | If the installation is successful, we will see multiple files (.css, .map, .js) added to the Content and Scripts folder under our web project. . | Drag-and-drop these three specific files from the Content and Scripts into the &lt;head&gt;&lt;/head&gt; section of the web page where we want to code with Bootstrap (I have added it to the Login.apsx which we have created in the very first tutorial). bootstrap.min.css | jquery-3.0.0.min.js | bootstrap.min.js | . &lt;html&gt; &lt;head runat=&quot;server&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;link href=&quot;Content/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;script src=&quot;Scripts/jquery-3.0.0.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;Scripts/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; ...other codes... &lt;/body&gt; &lt;/html&gt; . | To check if we have added the Bootstrap correctly, run the web project and we should be able to spot the differences in the Login page: . | If the differences (e.g. font and size) are not obvious for you, let’s add a Boostrap class to the Login button: . &lt;asp:Button ID=&quot;login_button&quot; class=&quot;btn btn-outline-danger&quot; runat=&quot;server&quot; Text=&quot;LOGIN&quot; /&gt; . Now, run the project again and hopefully, you can notice how the design of the Login button had changed: . | If you want to explore more about web programming with ASP.NET, I will recommend you to refer to this tutorial, which shows you how to create a Master page in ASP.NET and develop a navigation bar for the Master page using Bootstrap. . I hope you found this quick guide helpful! If you have more questions about this tutorial, please let me know by commenting below. .",
            "url": "https://you3quan2.github.io/youquan-blog/visual%20studio/asp.net/bootstrap/web/programming/2020/04/08/add-bootstrap-aspnet-web.html",
            "relUrl": "/visual%20studio/asp.net/bootstrap/web/programming/2020/04/08/add-bootstrap-aspnet-web.html",
            "date": " • Apr 8, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Creating a Master Page in ASP.NET",
            "content": "Learning Outcomes . In this tutorial, we will: . Learn what is a web page layout and a sitemap. | Learn how to create a Master page for a multiple pages web site in ASP.NET. | Learn how to use Bootstrap to design the Master page, with a focus on the navigation bar. | . Prerequisite . If you are new to ASP.NET, I suggest you to look into this tutorial to learn how to create an ASP.NET web project with Microsoft Visual Studio. . Why we need to learn this? . I believe you should have known how to create a single ASP.NET web page by now. However, in real life, a web site is made up of multiple web pages. Take Twitter as an example: . If we login to our Twitter account, we can see a menu on the left-hand side of the page. We call it as a navigation bar, which helps us to navigate throughout the web site (e.g. from Home page to the Explore page). Every time we browse from one page to another, the navigation bar remains the same, and only a specific portion of the web page changed. . Hence, it is impractical if we write the codes for the navigation bar in every single web pages within our web site, and change each page manually every time we change the design of our web site. ASP.NET offers us a solution - the Master Page. By using the Master page, we will only need to code the standard layout in the Site.Master, and this will be implemented to the rest of the pages within our web site. . Requirements . Microsoft Visual Studio (I am using the 2019 version). See here on how to download and install. | Bootstrap. See here on how to add the Boostrap package in ASP.NET. | A Web page Layout . Let’s start by understanding the basic concept of the layout of a web page. The example below shows a web page which has five regions: Header, Content, Advertisement, Recommended Book and Footer. . Note: Image source (link) . For the sake of simplicity, we will focus only on three regions: Header, Content and Footer. Recall the example of the Twitter page discussed above, a web application usually has the same Header and Footer across all pages. The Content is the region where the unique content for each web page is located. . Hence, we will define the Header and Footer region in our ASP.NET Master page and create the unique content in the rest of the web pages within the same web application. . The Sitemap . Before we start to develop our web site, we need to first have a sitemap , which lists all the web pages within the web site and how these pages are interrelated. Just like the Twitter web site above which has pages like Home page, Explorer page, Profile page, now we are going to create a sitemap for our web site. . Our web site, which I call it as ASP.NET Tutorial website has the following web pages: . Home page | Profile page | Contact Web Chat page | Online Enquiry page | . | . The sitemap above shows that we have four web pages: Home, Profile, Web Chat and Online Enquiry page. Note that in this example, we do not have a page for Contact. The users can directly access the Web Chat page and Online Enquiry page, which are categorised under Contact. . By now, we can have a rough idea that our website is going to look something like the one below: . Header region (with a navigation bar, which created based on our sitemap) | Content region (a simple text which indicates what page it is) | Footer region (website’s info, copyright etc.) | . Create a Master Page with ASP.NET . Note: We can still use the ASP.NetTutorial project which we have created in the previous tutorial. Keep the Login page for now. . Right click on the project (e.g. ASP.NetTutorial) and select Add → New Item. Under Web, select Web Forms and then click on Web Forms Master Page. We can specify the name for the Master page. I maintain its default name - Site1. A Site1.Master page will be created automatically with the codes as follow: . &lt;%@ Master Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;Site1.master.cs&quot; Inherits=&quot;ASPNetTutorial.Site1&quot; %&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head runat=&quot;server&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;asp:ContentPlaceHolder ID=&quot;head&quot; runat=&quot;server&quot;&gt; &lt;/asp:ContentPlaceHolder&gt; &lt;/head&gt; &lt;body&gt; &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt; &lt;div&gt; &lt;asp:ContentPlaceHolder ID=&quot;ContentPlaceHolder1&quot; runat=&quot;server&quot;&gt; &lt;/asp:ContentPlaceHolder&gt; &lt;/div&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . | Next, we create the rest of the web pages. Right click on the project (e.g. ASP.NetTutorial) and select Add → New Item. Under Web, select Web Forms and then click on Web Form with Master Page. Name these web pages as Home.aspx, Profile.aspx, WebChat.aspx and EnquiryForm.aspx respectively. We will be asked to select the Master page for each of the web pages. In this case, we need to select Site1.Master, which is the Master page for these pages. Note that these web pages have a few lines of codes readily available as follow: . &lt;%@ Page Title=&quot;&quot; Language=&quot;C#&quot; MasterPageFile=&quot;~/Site1.Master&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;Home.aspx.cs&quot; Inherits=&quot;ASPNetTutorial.Home&quot; %&gt; &lt;asp:Content ID=&quot;Content1&quot; ContentPlaceHolderID=&quot;head&quot; runat=&quot;server&quot;&gt; &lt;/asp:Content&gt; &lt;asp:Content ID=&quot;Content2&quot; ContentPlaceHolderID=&quot;ContentPlaceHolder1&quot; runat=&quot;server&quot;&gt; &lt;/asp:Content&gt; . | We can see a ContentPlaceHolder control with ID ContentPlaceHolder1 in Site1.Master. This is the place where other pages have their own unique content. The common design for all pages within a web site (e.g. Header, Footer etc.) is placed outside this ContentPlaceHolder. . In other pages (e.g. Home.aspx, Profile.aspx), the Master page of these pages are defined in the &lt;%@ Page %&gt; directive (MasterPageFile=&quot;~/Site1.Master). These pages also have a Content control, which allow us to place unique content for every single page. . Code the Master Page with Bootstrap . As mentioned earlier, our Master page consists of three regions: Header, Content and Footer. The Content region is readily available in our Master page, where we can find the ContentPlaceHolder control. . Now, create the Header region by adding a &lt;header&gt;&lt;/header&gt; tag within the &lt;body&gt;...&lt;/body&gt; but BEFORE the ContentPlaceHolder control. . | Then, add the Footer region by adding a &lt;footer&gt;&lt;/footer&gt; tag within the &lt;body&gt;...&lt;/body&gt; but AFTER the ContentPlaceHolder control. . &lt;html&gt; &lt;head runat=&quot;server&quot;&gt; &lt;title&gt;&lt;/title&gt; ...other codes... &lt;/head&gt; &lt;body&gt; &lt;header&gt;&lt;/header&gt; ...other codes... &lt;asp:ContentPlaceHolder ID=&quot;ContentPlaceHolder1&quot; runat=&quot;server&quot;&gt;&lt;/asp:ContentPlaceHolder&gt; ...other codes... &lt;footer&gt;&lt;/footer&gt; &lt;body&gt; &lt;/html&gt; . | Next, add the Bootstrap navigation bar codes into &lt;header&gt;&lt;/header&gt; tag. . &lt;nav class=&quot;navbar navbar-expand-lg navbar-light bg-light&quot;&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;ASP.NET Tutorial&lt;/a&gt; &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbarNavDropdown&quot; aria-controls=&quot;navbarNavDropdown&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt; &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarNavDropdown&quot;&gt; &lt;ul class=&quot;navbar-nav&quot;&gt; &lt;li class=&quot;nav-item active&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;Home.aspx&quot;&gt;Home&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;Profile.aspx&quot;&gt;Profile&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item dropdown&quot;&gt; &lt;a class=&quot;nav-link dropdown-toggle&quot; href=&quot;#&quot; id=&quot;navbarDropdownMenuLink&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;Contact&lt;/a&gt; &lt;div class=&quot;dropdown-menu&quot; aria-labelledby=&quot;navbarDropdownMenuLink&quot;&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;WebChat.aspx&quot;&gt;Web Chat&lt;/a&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;EnquiryForm.aspx&quot;&gt;Enquiry Form&lt;/a&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/nav&gt; . You can learn more about Bootstrap navigation bar by following this link. . | Finally, add the following line within the &lt;footer&gt;&lt;/footer&gt; tag. . ASP.NET Tutorial by @youquan in 2020. . Of course, you can put your own information within the &lt;footer&gt;&lt;/footer&gt; tag. Now, view Site1.Master in Split or Design mode to check on the design of our Master page. . | Add Content to Other Pages . We are now going to add unique content into each page within the web site (except the Master page). Go to Home.aspx and add a heading within the Content control: . &lt;%@ Page Title=&quot;&quot; Language=&quot;C#&quot; MasterPageFile=&quot;~/Site1.Master&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;Home.aspx.cs&quot; Inherits=&quot;ASPNetTutorial.Home&quot; %&gt; &lt;asp:Content ID=&quot;Content1&quot; ContentPlaceHolderID=&quot;head&quot; runat=&quot;server&quot;&gt; &lt;/asp:Content&gt; &lt;asp:Content ID=&quot;Content2&quot; ContentPlaceHolderID=&quot;ContentPlaceHolder1&quot; runat=&quot;server&quot;&gt; &lt;h2&gt; This is my HOME page. &lt;/h2&gt; &lt;/asp:Content&gt; . Repeat this for other pages, but change the content of the heading accordingly (e.g. This is my PROFILE page.). . Set the Start Page and Run Our Project . Commonly, a web site always start with the Home page. Hence, whenever we test our web project, we would like to first start with this page. To do this, right click on the Home page file - Home.aspx and select Set As Start Page. Now, run the project and test the navigation bar, which should lead you to different pages. . . Takeaways . I hope by now: . You can explain what is a web page layout and what is a sitemap. | You are confident to create a Master page for a multiple pages web site in ASP.NET. | You know how to create a navigation bar using Bootstrap. | . Coming up next, we will learn: . How to use create a database in ASP.NET. | . I hope you found this tutorial helpful! If you have more questions, please let me know by commenting below. .",
            "url": "https://you3quan2.github.io/youquan-blog/visual%20studio/asp.net/master%20page/web/programming/2020/04/07/create-masterpage-aspnet-web.html",
            "relUrl": "/visual%20studio/asp.net/master%20page/web/programming/2020/04/07/create-masterpage-aspnet-web.html",
            "date": " • Apr 7, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Getting Started: ASP.NET Web Programming with C#",
            "content": "Learning Outcomes . In this tutorial, we will: . Familiarise with the components in Visual Studio, including Solution Explorer, Toolbox, Properties and Project View. | Learn how to to develop a single ASP.NET webpage with Visual Studio. | . Why we need to learn this? . I believe you are here because you want/have to learn ASP.NET Web Programming. To learn ASP.NET, we need to use its de facto IDE - Microsoft Visual Studio. . My experience tells me that it is always better to start by having a brief tour of the tool which we are going to use in developing a project. By mastering the tools, it is going to save a huge amount of time throughout the learning process. . Requirements . Microsoft Visual Studio (I am using the 2019 version). See here on how to download and install. . Create the Project . Open our Visual Studio IDE and click on: Alternatively, click on FILE → New Project. . | Choose the ASP.NET Web Application (.NET Framework). Make sure it is the C# template. . | Configure the project by having a Project name and Solution name. Take note on the location where the project is going to be saved. The version of the framework which I am using is .NET Framework 4.7.2. Click Create. . | Create a new ASP.NET web application by choosing the Empty template. Click Create again. . | The new project will be opened and the Solution Explorer will display the details of this project (my project is ASPNetTutorial). That is fine if you cannot find your Solution Explorer now, I will give you a tour of Visual Studio in the next section. . | Familiarise with Visual Studio . There are four must-know components in Visual Studio: Solution Explorer, Toolbox, Properties and Project View. Usually, the Solution Explorer will be readily available when we open a project. When we click on the project name in the Solution Explorer (mine is ASPNetTutorial which highlighted in blue), we will also see the Project Properties: However, if you cannot see your Solution Explorer, go to the top of the Visual Studio and click on View → Solution Explorer. . | To introduce the functionalities of other components, we need to first create an empty web form. Right click on the project’s name (mine is ASPNetTutorial), then click Add → Web Form. Name the item as Login because we are going to create a simple Login interface. Now, we are supposed to have a Login.aspx file. This file contains basic HTML codes with &lt;head&gt;&lt;/head&gt;, &lt;form&gt;&lt;/form&gt; and &lt;body&gt;&lt;/body&gt;. . &lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;Login.aspx.cs&quot; Inherits=&quot;ASPNetTutorial.Login&quot; %&gt; &lt;!DOCTYPE html&gt; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt; &lt;head runat=&quot;server&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt; &lt;div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . | Below the Login.aspx file, there is a component which I call it as Project View. It allows us to view our project in three different views: Design, Split and Source. Personally, I like Split view which provides us with Source and Design in the same window. . | Another important component which we will use frequently is the Toolbox. To add this component, go to the top of the Visual Studio and click on View → Toolbox. In the Toolbox, there are various types of elements which we know as Controls in ASP.NET. These controls help to speed up our development process. We will see how Toolbox and Controls work in the next section. . | Our First ASP.NET Web Page . Now, we are going to familiarise with the components in Visual Studio by creating a simple Login interface. This Login interface will have a username text box, a password textbox and a login button. The text boxes and the button will be placed in a 3 (rows) x 2 (columns) table: . Username: Username’s Textbox . Password: | Password’s Textbox | . Login button |   | . If you have learnt HTML, then you must know the we can manually code the layout presented above using HTML syntax such as &lt;form&gt;&lt;/form&gt;, &lt;table&gt;&lt;/table&gt;, &lt;tr&gt;&lt;/tr&gt;, &lt;td&gt;&lt;/td&gt;, &lt;input type=&quot;text&quot;&gt; and &lt;input type=&quot;submit&quot;&gt;. . However, with Visual Studio, this layout can be developed with very little manual coding or no manual coding at all. . Let’s start by adding a 3 (rows) x 2 (columns) table inside the &lt;div&gt;&lt;/div&gt; tag. Move our mouse cursor inside the &lt;div&gt; box: Go to the top of the Visual Studio and click on Table → Insert Table. Create a 3 (rows) x 2 (columns) table. . | Type the text Username and Password into the designated table cells. . | We are going to use the Toolbox to create our textboxes and button. In the Toolbox, select Standard → TextBox. Click on the TextBox, and drag-and-drop it into the designated Username&#39;s Textbox cell. Repeat for Password&#39;s Textbox. . | To add the Login button, select Standard → Button. Click on the Button, and drag-and-drop it into the designated Login button cell. By now, we should have a layout as follow: . | Note that the text inside the Login button is Button. To change the text to Login, click on the Login button. The Properties window of the Login button will be shown right below the Solution Explorer. Change the Text of the button to LOGIN. . | We can always make changes on this Login page by adding or modifying the HTML codes, without using the Toolbox. Let say if I want to add a title to this page, I can add the &lt;h1&gt;&lt;/h1&gt; directly to the existing HTML codes: &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt; &lt;div&gt; &lt;h1&gt;My First Login Page&lt;/h1&gt; &lt;table style=&quot;width: 100%&quot;&gt; &lt;tr&gt; &lt;td&gt;Username:&lt;/td&gt; ... other codes here .... &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/form&gt; . Every time we make changes to the code, a warning message Design view is out of sync with Source view. Click here to synchronize views will be displayed. Click on the message and we will see the changes we made reflected in the Design view. . | Now, let’s try to run the project and check if everything is working as intended. By default, we will see a green arrow and IIS Express (Microsoft Edge) on top of our Microsoft Visual Studio. Personally, I prefer to run everything in Google Chrome. To change the default setting, click on the down arrow and select Google Chrome (if you have Google Chrome installed). . | Click on IIS Express (Google Chrome). Google Chrome will open shortly with our very first Login page developed using ASP.NET: | Best Practices . There are many best coding practices (which you can read here). But, I just want to focus on one of these practices in this tutorial - Naming conventions. Using meaningless naming can cause confusion to reduce the readability of our codes. Take our Login page for example, if we browse through these HTML codes, we will notice some meaningless naming as follow: . &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt; &lt;asp:TextBox ID=&quot;TextBox1&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt; &lt;asp:TextBox ID=&quot;TextBox2&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt; &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; Text=&quot;LOGIN&quot; /&gt; . The names which are automatically assigned to the HTML elements by Visual Studio can cause confusion, especially when our web project grows bigger. Hence, it is always a good practice to replace these IDs with meaningful names: . &lt;form id=&quot;login_form&quot; runat=&quot;server&quot;&gt; &lt;asp:TextBox ID=&quot;username_txtbox&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt; &lt;asp:TextBox ID=&quot;pwd_txtbox&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt; &lt;asp:Button ID=&quot;login_button&quot; runat=&quot;server&quot; Text=&quot;LOGIN&quot; /&gt; . Note that we can change these names by modifying the HTML codes directly, or by changing the properties of these controls (e.g. button, textbox) via the Properties window. . Takeaways . I hope by now: . You know how to use Visual Studio along with its components: Solution Explorer, Toolbox, Properties and Project View. | You are confident to create a single ASP.NET web page with Visual Studio (e.g. a login page, a form). | . Coming up next, we will learn: . How to create a Master page for a multiple pages web site in ASP.NET. (Click here for the tutorial) | . I hope you found this tutorial helpful! If you have more questions about this tutorial, please let me know by commenting below. .",
            "url": "https://you3quan2.github.io/youquan-blog/visual%20studio/asp.net/c%23/web/programming/2020/03/31/start-aspnet-c-web.html",
            "relUrl": "/visual%20studio/asp.net/c%23/web/programming/2020/03/31/start-aspnet-c-web.html",
            "date": " • Mar 31, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Setting Up Git and Gitlab on Linux Ubuntu",
            "content": "Learning Outcomes . In this tutorial, we will learn: . How to setup Git in our Linux workstation. | How to push C codes from our workstation to our Gitlab’s repository using Git. | . Why we need to learn this? . Imagine you are part of a large team which works on a software project. How you are going to keep track of the changes you and your team members have made over time? This is when a version control system like Git comes into handy. Git allows us to manage these ever-changing projects by storing the information about these projects in the data structure called a repository. . In this tutorial, we are going to use Git along with Gitlab, a web-based Git repository. Gitlab allows a team of software developers to manage a single software project from anywhere on the earth, as long as they have Internet access. However, bear in mind that it is still possible to manage a software project with Git without a web-based repository and Internet access. You can read more about this here. . Requirements . Ubuntu (Mine is 18.04.4 LTS, check yours with the command cat /etc/os-release) | CLion (An IDE for C++ and C by JetBrains) | Git. It can be installed using the following commands: sudo apt-add-repository ppa:git-core/ppa sudo apt-get update sudo apt-get install git . | xclip for retrieving SSH keys. To install xclip, we can run: sudo apt install xclip . | Gitlab. Create an account here. | . Once we have all these ready, then we are good to go! . Setting up Git . First, check if we have Git installed by typing the following command in our terminal: . Git version . The command tells us which Git version we have on our workstation. If you don’t receive a Git version message, it means that you need to install Git (check on the Requirements section). Next, we need to configure our Git username and email address, since every Git commit will use this information to identify us as the author. . Add our Git username and email by using the following commands: . git config --global user.name &quot;[your_username]&quot; git config --global user.email &quot;[your_email_address]@[yourdomain].com&quot; . Generating a SSH key pair for our Gitlab account . Open a new terminal on Linux and generate a new ED25519 SSH key pair: . ssh-keygen -t ed25519 -C &quot;[your_email_address]@[yourdomain].com&quot; . ED25519 is the most recommended public-key algorithm available today! You can read more about it here. . We will be asked to input a file path to save our SSH key pair and a passphrase to secure our new SSH key pair. Both of these can be ignored by pressing ENTER. If we did this correctly, we will get multiple messages, telling us where our identification and public key have been saved. We will also get our key fingerprint and our key’s randomart image. . Your identification has been saved in ~/.ssh/id_ed25519. Your public key has been saved in ~/.ssh/id_ed25519.pub. The key fingerprint is: SHA256:XXX [your_email_address]@[yourdomain].com The key&#39;s randomart image is: +--[ED25519 256]--+ | .*=XXo | | .oOO=o | | .+o+o | | .o..=o. | | E o*.oS. | | .+.+ . | | . o= | |.+ o.o. | |* o++.. | +-[SHA256]--+ . Adding our SSH key pair into the Gitlab account . To retrieve our SSH key pair, we first need to save the key pair into a text file using xclip: . xclip -sel clip &lt; ~/.ssh/id_ed25519.pub -o &gt; ~/gitlabsshkeypair.txt . Now, add the SSH key pair into our Gitlab account by following these steps: . Open the gitlabsshkeypair.txt and copy our SSH key pair. | Open the Gitlab account in a browser, click the Gitlab avatar in the upper right corner and select Settings. | Navigate to SSH Keys and paste the SSH key pair which we have copied to the Key field. | Fill in the Title text box. It can be anything we like. We can leave the Expires at text box empty. | Click the Add key button. | Testing that everything is set up correctly . Let’s test if everything is set up correctly by typing the following line into our terminal: . ssh -T git@gitlab.com . Since it is the first time we connect to Gitlab via SSH, we will be asked to verify the authenticity of the GitLab host we are connecting to. We are supposed to get a message as follow: . The authenticity of host &#39;gitlab.com (xxx.xxx.xxx.xxx)&#39; can&#39;t be established. ECDSA key fingerprint is SHA256:XXXX. Are you sure you want to continue connecting (yes/no)? . Type yes. We will get a warning message followed by a welcome message: . Warning: Permanently added &#39;gitlab.com (xxx.xxx.xxx.xxx)&#39; (ECDSA) to the list of known hosts. Welcome to GitLab, [your_Gitlab_username]! . By now, we can push and pull codes between our workstation and Gitlab securely! . Push our project from our workstation to Gitlab . We are going to push our codes from the our workstation to our Gitlab account. In order to do this, we first need to have: . A project created in our workstation. In my case, I have a C Executable project created using CLion IDE and stored in the following directory: ~/CLionProjects/CProject. | An empty project created in our Gitlab account, where we are going to push the project’s codes from our workstation into this empty project. | We can create a project in Gitlab account by following these steps: . Clik the New Project button in the upper right corner of our Gitlab account. | Give a name to our project (I used CProject) and click on Create Project. | We will be redirected to the project page. This project should be empty. | Now, go back to our workstation and go to the directory where we saved our project. First, we need to use the init command for Git to begin tracking the directory: . cd ~/CLionProjects/CProject git init . Note that your directory can be different than mine. . Finally, use the following commands to push our project: . git remote add origin git@gitlab.com:[yourGitLabUsername]/[yourprojectname].git git add . git commit -m &quot;Initial commit&quot; git push -u origin master . In my case, I used git remote add origin git@gitlab.com:you3quan2/cproject.git. . Go to our Gitlab account and we are supposed to see the same set of codes in our workstation’s project folders and the Gitlab’s project folders. . Update changes in our workstation to Gitlab . Now, we have the exact same project in our workstation and Gitlab. But, we still need to update the Gitlab’s project every time we made changes on the project in our workstation. I will show you an example how we can do this. . In my C project, there is a main.c file which contains the following codes: . #include &lt;stdio.h&gt; int main() { printf(&quot;Hello, World! n&quot;); return 0; } . I updated my main.c file and changed the line from Hello, World! to Goodbye, World!: . #include &lt;stdio.h&gt; int main() { printf(&quot;Goodbye, World! n&quot;); return 0; } . Note: You can make changes in any files you like within your project. . To update these changes to my Gitlab project, I used: . git add . git commit -m &quot;COMMENT TO DESCRIBE THE INTENTION OF THE COMMIT&quot; git push origin master . My comment is Change from Hello World to Goodbye World. . Go to the Gitlab account and check on the specific file which we have modified. We are supposed to see the changes which we have made. If we click on the History button, we will see our commit changes: . . Takeaways . I hope by now you know how to setup your Linux workstation and Gitlab in order for you to push your project from your workstation to Gitlab using Git. . I hope you found this tutorial helpful. Have more questions about this? Let me know by commenting below! . References .",
            "url": "https://you3quan2.github.io/youquan-blog/git/gitlab/ubuntu/clion/c/programming/2020/03/26/setup-git-gitlab-clion-c.html",
            "relUrl": "/git/gitlab/ubuntu/clion/c/programming/2020/03/26/setup-git-gitlab-clion-c.html",
            "date": " • Mar 26, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "How I build this site? . This site is built with fastpages, an easy to use blogging platform with extra features for Jupyter Notebooks. . . fastpages automates the process of creating blog posts via GitHub Actions, so you don’t have to fuss with conversion scripts. A full list of features can be found on GitHub. . Contact . Email me at youquan[at]protonmail[dot]com if you have any questions. .",
          "url": "https://you3quan2.github.io/youquan-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}