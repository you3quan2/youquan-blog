{
  
    
        "post0": {
            "title": "Getting Started: ASP.NET Web Programming with C#",
            "content": "Learning Outcomes . In this tutorial, we will: . Familiarise with the components in Visual Studio, including Solution Explorer, Toolbox, Properties and Project View. | Learn how to to setup a one-page ASP.NET web application with Visual Studio. | . Why we need to learn this? . I believe you are here because you want/have to learn ASP.NET Web Programming. To learn ASP.NET, we need to use its defacto IDE - Microsoft Visual Studio. . My experience tells me that it is always better to start by having a brief tour on the tool which we are going to use in developing a project. It is going to save a huge amount of time throughout the learning process later if we first learn to master the tools. . Requirements . Microsoft Visual Studio (I am using the 2019 version). See here on how to download and install. . Create the Project . Open our Visual Studio IDE and click on: Alternatively, click on FILE → New Project. . | Choose the ASP.NET Web Application (.NET Framework). Make sure it is the C# template. . | Configure the project by having a Project name and Solution name. Take note on the location where the project is going to be saved. The version of the framework which I am using is .NET Framework 4.7.2. Click Create. . | Create a new ASP.NET web application by choosing the Empty template. Click Create again. . | The new project will be opened and the Solution Explorer will display the details of this project (my project is ASPNetTutorial). That is fine if you cannot find your Solution Explorer now, I will give you a tour of Visual Studio in the next section. . | Familiarise with Visual Studio . There are four must-know components in Visual Studio: Solution Explorer, Toolbox, Properties and Project View. Usually, the Solution Explorer will be readily available when we open a project. When we click on the project name in the Solution Explorer (mine is ASPNetTutorial which highlighted in blue), we will also see the Project Properties: However, if you cannot see your Solution Explorer, go to the top of the Visual Studio and click on View → Solution Explorer. . | To introduce the functionalities of other components, we need to first create an empty web form. Right click on the project’s name (mine is ASPNetTutorial), then click Add → Web Form. Name the item as Login because we are going to create a simple Login interface. Now, we are supposed to have a Login.aspx file. This file contains basic HTML codes with &lt;head&gt;&lt;/head&gt;, &lt;form&gt;&lt;/form&gt; and &lt;body&gt;&lt;/body&gt;. . &lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;Login.aspx.cs&quot; Inherits=&quot;ASPNetTutorial.Login&quot; %&gt; &lt;!DOCTYPE html&gt; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt; &lt;head runat=&quot;server&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt; &lt;div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . | Below the Login.aspx file, there is a component which I call it as Project View. It allows us to view our project in three different views: Design, Split and Source. Personally, I like Split view which provides us with Source and Design in the same window. . | Another important component which we will use frequently is the Toolbox. To add this component, go to the top of the Visual Studio and click on View → Toolbox. In the Toolbox, there are various types of elements which we know as Controls in ASP.NET. These controls help to speed up our development process. We will see how Toolbox and Controls work in the next section. . | Our First ASP.NET Web Page . Now, we are going to familiarise with the components in Visual Studio by creating a simple Login interface. This Login interface will have an username textbox, an username textbox and a login button. The textboxes and the button will be placed in a 3 (rows) x 2 (columns) table: . Username: Username’s Textbox . Password: | Password’s Textbox | . Login button |   | . If you have learnt HTML, then you must know the we can manually code the layout presented above using HTML syntax such as &lt;form&gt;&lt;/form&gt;, &lt;table&gt;&lt;/table&gt;, &lt;tr&gt;&lt;/tr&gt;, &lt;td&gt;&lt;/td&gt;, &lt;input type=&quot;text&quot;&gt; and &lt;input type=&quot;submit&quot;&gt;. . However, with Visual Studio, this layout can be developed with very little manual coding or no manual coding at all. . Let’s start by adding a 3 (rows) x 2 (columns) table inside the &lt;div&gt;&lt;/div&gt; tag. |",
            "url": "https://you3quan2.github.io/youquan-blog/visual%20studio/asp.net/c%23/web/programming/2020/03/31/start-aspnet-c-web.html",
            "relUrl": "/visual%20studio/asp.net/c%23/web/programming/2020/03/31/start-aspnet-c-web.html",
            "date": " • Mar 31, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Setting Up Git and Gitlab on Linux Ubuntu",
            "content": "Learning Outcomes . In this tutorial, we will learn: . How to setup Git in our Linux workstation. | How to push C codes from our workstation to our Gitlab’s repository using Git. | . Why we need to learn this? . Imagine you are part of a large team which works on a software project. How you are going to keep track of the changes you and your team members have made over time? This is when a version control system like Git comes into handy. Git allows us to manage these ever-changing projects by storing the information about these projects in the data structure called a repository. . In this tutorial, we are going to use Git along with Gitlab, a web-based Git repository. Gitlab allows a team of software developers to manage a single software project from anywhere on the earth, as long as they have Internet access. However, bear in mind that it is still possible to manage a software project with Git without a web-based repository and Internet access. You can read more about this here. . Requirements . Ubuntu (Mine is 18.04.4 LTS, check yours with the command cat /etc/os-release) | CLion (An IDE for C++ and C by JetBrains) | Git. It can be installed using the following commands: sudo apt-add-repository ppa:git-core/ppa sudo apt-get update sudo apt-get install git . | xclip for retrieving SSH keys. To install xclip, we can run: sudo apt install xclip . | Gitlab. Create an account here. | . Once we have all these ready, then we are good to go! . Setting up Git . First, check if we have Git installed by typing the following command in our terminal: . Git version . The command tells us which Git version we have on our workstation. If you don’t receive a Git version message, it means that you need to install Git (check on the Requirements section). Next, we need to configure our Git username and email address, since every Git commit will use this information to identify us as the author. . Add our Git username and email by using the following commands: . git config --global user.name &quot;[your_username]&quot; git config --global user.email &quot;[your_email_address]@[yourdomain].com&quot; . Generating a SSH key pair for our Gitlab account . Open a new terminal on Linux and generate a new ED25519 SSH key pair: . ssh-keygen -t ed25519 -C &quot;[your_email_address]@[yourdomain].com&quot; . ED25519 is the most recommended public-key algorithm available today! You can read more about it here. . We will be asked to input a file path to save our SSH key pair and a passphrase to secure our new SSH key pair. Both of these can be ignored by pressing ENTER. If we did this correctly, we will get multiple messages, telling us where our identification and public key have been saved. We will also get our key fingerprint and our key’s randomart image. . Your identification has been saved in ~/.ssh/id_ed25519. Your public key has been saved in ~/.ssh/id_ed25519.pub. The key fingerprint is: SHA256:XXX [your_email_address]@[yourdomain].com The key&#39;s randomart image is: +--[ED25519 256]--+ | .*=XXo | | .oOO=o | | .+o+o | | .o..=o. | | E o*.oS. | | .+.+ . | | . o= | |.+ o.o. | |* o++.. | +-[SHA256]--+ . Adding our SSH key pair into the Gitlab account . To retrieve our SSH key pair, we first need to save the key pair into a text file using xclip: . xclip -sel clip &lt; ~/.ssh/id_ed25519.pub -o &gt; ~/gitlabsshkeypair.txt . Now, add the SSH key pair into our Gitlab account by following these steps: . Open the gitlabsshkeypair.txt and copy our SSH key pair. | Open the Gitlab account in a browser, click the Gitlab avatar in the upper right corner and select Settings. | Navigate to SSH Keys and paste the SSH key pair which we have copied to the Key field. | Fill in the Title text box. It can be anything we like. We can leave the Expires at text box empty. | Click the Add key button. | Testing that everything is set up correctly . Let’s test if everything is set up correctly by typing the following line into our terminal: . ssh -T git@gitlab.com . Since it is the first time we connect to Gitlab via SSH, we will be asked to verify the authenticity of the GitLab host we are connecting to. We are supposed to get a message as follow: . The authenticity of host &#39;gitlab.com (xxx.xxx.xxx.xxx)&#39; can&#39;t be established. ECDSA key fingerprint is SHA256:XXXX. Are you sure you want to continue connecting (yes/no)? . Type yes. We will get a warning message followed by a welcome message: . Warning: Permanently added &#39;gitlab.com (xxx.xxx.xxx.xxx)&#39; (ECDSA) to the list of known hosts. Welcome to GitLab, [your_Gitlab_username]! . By now, we can push and pull codes between our workstation and Gitlab securely! . Push our project from our workstation to Gitlab . We are going to push our codes from the our workstation to our Gitlab account. In order to do this, we first need to have: . A project created in our workstation. In my case, I have a C Executable project created using CLion IDE and stored in the following directory: ~/CLionProjects/CProject. | An empty project created in our Gitlab account, where we are going to push the project’s codes from our workstation into this empty project. | We can create a project in Gitlab account by following these steps: . Clik the New Project button in the upper right corner of our Gitlab account. | Give a name to our project (I used CProject) and click on Create Project. | We will be redirected to the project page. This project should be empty. | Now, go back to our workstation and go to the directory where we saved our project. First, we need to use the init command for Git to begin tracking the directory: . cd ~/CLionProjects/CProject git init . Note that your directory can be different than mine. . Finally, use the following commands to push our project: . git remote add origin git@gitlab.com:[yourGitLabUsername]/[yourprojectname].git git add . git commit -m &quot;Initial commit&quot; git push -u origin master . In my case, I used git remote add origin git@gitlab.com:you3quan2/cproject.git. . Go to our Gitlab account and we are supposed to see the same set of codes in our workstation’s project folders and the Gitlab’s project folders. . Update changes in our workstation to Gitlab . Now, we have the exact same project in our workstation and Gitlab. But, we still need to update the Gitlab’s project every time we made changes on the project in our workstation. I will show you an example how we can do this. . In my C project, there is a main.c file which contains the following codes: . #include &lt;stdio.h&gt; int main() { printf(&quot;Hello, World! n&quot;); return 0; } . I updated my main.c file and changed the line from Hello, World! to Goodbye, World!: . #include &lt;stdio.h&gt; int main() { printf(&quot;Goodbye, World! n&quot;); return 0; } . Note: You can make changes in any files you like within your project. . To update these changes to my Gitlab project, I used: . git add . git commit -m &quot;COMMENT TO DESCRIBE THE INTENTION OF THE COMMIT&quot; git push origin master . My comment is Change from Hello World to Goodbye World. . Go to the Gitlab account and check on the specific file which we have modified. We are supposed to see the changes which we have made. If we click on the History button, we will see our commit changes: . . References .",
            "url": "https://you3quan2.github.io/youquan-blog/git/gitlab/ubuntu/clion/c/programming/2020/03/26/setup-git-gitlab-clion-c.html",
            "relUrl": "/git/gitlab/ubuntu/clion/c/programming/2020/03/26/setup-git-gitlab-clion-c.html",
            "date": " • Mar 26, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "How I build this site? . This site is built with fastpages, an easy to use blogging platform with extra features for Jupyter Notebooks. . . fastpages automates the process of creating blog posts via GitHub Actions, so you don’t have to fuss with conversion scripts. A full list of features can be found on GitHub. . Contact . Email me at youquan[at]protonmail[dot]com if you have any questions. .",
          "url": "https://you3quan2.github.io/youquan-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}